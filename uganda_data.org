* Ugandan LSMS Data
The following sets up a dataframe from Ugandan data; it relies on code
from =Data/LSMS/Uganda/MANIFEST.org= to create a pickled pd.DataFrame
=Data/LSMS/Uganda/tmp/uganda.df=; also on a file
=Data/Uganda/expenditure_codes.pickle= which provides a mapping of
codes for different expenditure items into particular food categories.

Output from this routine should include a pair of =pd.DataFrames=
indexed by =(j,t,mkt)=.  The  first is called =y=, with columns
corresponding to log expenditures (zero expenditures should be set to
=NaN=).    The second is called =z=, with columns corresponding to
various household characteristics to be controlled for in the demand
estimation.  

Other inputs to the routine include information on how markets are to
be defined; conceptually,  these are areas (ordinarily geographical)
within which we expect the Law of One Price to hold,  at least
approximately.  This involves specifying a variable in =uganda.df=
which gives an indication of what market a given  household resides
in.  Examples might include region, or a rural/urban identifier.  If
empty, it's assumed that  all households live in a common market.

#+name: market
| Region |

A final input is a list of variables in =uganda.df= of household
characteristics, to be controlled for in the demand regressions.  This
will typically include information on household composition.  Note
that this list must /not/ include the variables which define the market.

#+name: controls
| Boys | Girls | Men | Women | log HSize | Rural |

#+name: uganda_data
#+begin_src python :noweb no-export :var MARKET=market[0] :var CONTROLS=controls[0] :results output raw table :tangle uganda_data.py
  import pandas as pd
  import numpy as np
  import sys
  sys.path.append('../Data/Uganda')
  sys.path.append('../Empirics')
  import neediness as nd

  def uganda_data(MARKET=MARKET,CONTROLS=CONTROLS,DataDir='../Data/Uganda/'):
      """Return log expenditures y, household characteristics z, and prices.
      """

      assert len(set(MARKET).intersection(CONTROLS))==0, "Controls must not include market."

      exps=pd.read_pickle(DataDir+'/expenditure_codes.pickle')

      try:
          df=pd.read_pickle(DataDir+'/uganda.df')
          prices=pd.read_pickle(DataDir+'/food_prices.df')
      except IOError:
          print "Need to build {uganda,food_prices}.df (using code in LSMS/Uganda/MANIFEST.org)."

      expdf=nd.group_expenditures(df,exps)

      expdf=expdf.replace(0,np.nan) # Zeros to NaN

      # Drop goods where too few observations to reliably estimate covariance matrix
      expdf=nd.drop_columns_wo_covariance(expdf,min_obs=30,VERBOSE=False)

      # Fix up some variables used as characteristics
      df.rename(columns={'region':'Region'},inplace=True)

      mydf=expdf.copy()
      mydf['HHSize']=df[['boys','girls','women','men']].sum(axis=1)
      mydf['HHSize'].replace(to_replace=[0],value=[np.NaN],inplace=True)
      mydf['log HSize']=np.log(mydf['HHSize'])
      mydf['Boys']=df['boys']
      mydf['Girls']=df['girls']
      mydf['Women']=df['women']
      mydf['Men']=df['men']
      mydf['Rural']=df['urban']
      mydf['Region']=df['Region']

      # Order so year is second level
      mydf.index.set_names(['t','j'],inplace=True)
      mydf = mydf.reset_index().set_index(['j','t'])

      mydf.sortlevel(inplace=True)

      mydf.reset_index(inplace=True)
      if len(MARKET[0]):
          mydf['mkt']=mydf[MARKET]
      else:
          mydf['mkt']=1

      mydf = mydf.set_index(['j','t','mkt'])

      y=np.log(mydf[expdf.columns])
      z=mydf[CONTROLS]
 
      ####################################
      # Now set up market prices

      prices.index=prices.index.reorder_levels([1,0,2]) # Make index order match prices

      prices.index.names = ['j','t','Item']

      pricedf=nd.group_expenditures(prices['market'].unstack(),exps)
      pricedf=pricedf.replace(0,np.nan) # Zeros to NaN

      if len(MARKET[0]):
          pricedf['mkt']=mydf.reset_index('mkt')[MARKET]
      else:
          pricedf['mkt']=1

      pricedf = pricedf.reset_index().set_index(['j','t','mkt'])

      # Also give prices for good to be declared numeraire.
      # E.g., here are median rice prices and onion prices in different years from LSMS/Uganda/MANIFEST.org:
      prices = pricedf.reset_index().groupby(['t','mkt']).median()

      return y,z,prices

  y,z,prices=uganda_data()

#+end_src



